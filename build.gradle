plugins {
    id "java-library"
    id "maven-publish"
}

ext {
    url = 'https://github.com/tim-group/tickets'
    slf4jVersion = '1.7.5'
}

group = 'com.timgroup'
if (System.getenv("BUILD_NUMBER")) version = "1.0.${System.getenv('BUILD_NUMBER')}"

tasks.withType(JavaCompile).all {
    sourceCompatibility = "1.8"
    targetCompatibility = "1.8"
    options.encoding = "UTF-8"
    options.incremental = true
    options.deprecation = true
    options.compilerArgs << "-parameters"
}

jar {
    manifest {
        attributes(
                'Implementation-Title': project.name,
                'Implementation-Version': project.version,
                'Implementation-Vendor': 'youDevise Ltd',
                'Implementation-Vendor-Id': project.group,
                'Implementation-URL': project.url
        )
    }
}

repositories {
    mavenCentral()
}

// some of these dependencies are optional, in that they are needed to build, but might not be needed to run; Gradle does currently let us say so
dependencies {
    implementation "org.slf4j:slf4j-api:$slf4jVersion"

    testImplementation "junit:junit:4.12"
    testImplementation "org.mockito:mockito-core:1.10.19"

    testRuntimeOnly "org.slf4j:slf4j-simple:$slf4jVersion"
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}
 
task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

assemble.dependsOn(javadocJar)
assemble.dependsOn(sourcesJar)

publishing {
    repositories {
        if (project.hasProperty("repoUrl")) {
            maven {
                url "${project.repoUrl}/repositories/yd-release-candidates"
                credentials {
                    username = project.repoUsername
                    password = project.repoPassword
                }
            }
        }
    }
    publications {
        mavenJava(MavenPublication) {
            artifactId project.ext.has('artifactId') ? project.ext.artifactId
                    : project == rootProject ? project.name
                    : rootProject.name + project.path.replace(':', '-')
            from components.java
            artifact(sourcesJar)
            artifact(javadocJar)
            pom.withXml {
                asNode().children().last() + {
                    resolveStrategy = DELEGATE_FIRST
                    name project.ext.has('pomName') ? project.ext.pomName : project.name
                    description project.description
                    url "http://github.com/tim-group/tickets"
                    licenses {
                        license {
                            name 'The BSD 2-Clause License'
                            url 'http://opensource.org/licenses/BSD-2-Clause'
                            distribution 'repo'
                        }
                    }
                    developers {
                        developer {
                            id 'steve.haslam@timgroup.com'
                            name 'Steve Haslam'
                            email 'steve.haslam@timgroup.com'
                        }
                    }
                }
            }
        }
    }
}
